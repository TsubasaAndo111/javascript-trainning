2025-4-18-第1回JavaScript研修
[第１章]
〇質問票
・コンソールで宣言した変数のスコープ
スクリプトの範囲、リロードすると消える
・従来のオブジェクト指向プログラミングとJavaScriptが異なる点
従来はクラスがあって、クラスに沿ったオブジェクトができる（Java）
JavaScriptはプロトタイプがくっついていて、それ起点で動くところが違う

境界値テスト
→空配列はエラー吐くことがあるからテスト項目に入れるとよい
探索テスト、モンキーテスト
→開発者が意図しない部分をテストする手法
テーブルテスト、パラメトリックテスト
→左に入力値、右に出力値を書くテスト
constでかけるやつはconstで書いた方がいい

[第２章]
console.log()の関数名の部分もエスケープシーケンスで実行できる

[第３章]
・メモリ開放
使わなくなったオブジェクトや配列にnullをいれて参照をなくすことで自動的にガベージコレクションしてくれる
・BigIntのタイミング攻撃
一文字ずつあてずっぽうで試して、処理時間の差をみて一文字ずつ明らかにしていく
PCのレジスタのサイズは１つあたり64bitだからそれを超えるBigIntだと処理時間に差が出てしまう
暗号を使う場合はarraybufferを使う
・サロゲートペアの見かけの文字数を数える方法
スプレッド構文やarryafrom、for文などで文字を分割することで可能
・サロゲートペアはコードを書くときに意識すべき？
すべき、文字数制限のときとか
・テンプレートリテラルの可読性について
メールを一斉送信する際に名前の部分をテンプレートリテラル化するのはいいかも
ただ複数行書くのは可読性の観点からやめた方がよい
・!==と!(...===...)の違い
どちらも結果は同じだが、左は評価が１回だが、右は２回ある
・nullとundefinedの使い分け
nullは明示的に値がないという意味
undefinedは未定義という意味
TypeScriptだとundefinedを使うときことも多い
・Symbol
Symbolを普通使うことはない
個人間ではSymbol.forで生成された値は異なるため、開発者以外がスクリプトを埋め込もうとしたときに、
Symbol.forで生成した値を使っていれば、開発者以外が埋め込むことはできなくなる
・標準の型変換は可読性の低下やバグの原因になりそうだけどどう？
基本的には使わない方がよい
・==はバグや可読性が低下しそうだけど、あえて使うケースはある？
nullとundefinedをまとめてやるときに使ってもいいかなぐらい
普通に仕事するときは===を使うことを推奨
・優先度なしを採用している例
手続きとしての優先度がまずあって、そのときに優先度なしだったら、値によって優先度が変わるということ
・型変換でfalseになったときにほかの型変換を試さないのはなぜ？
trueになるのが絶対的に正しいわけではない
falseになるのが期待した値という場合もあるため
・var宣言にホイスティングが実装されていた理由
制作者が最初につくったときにそうだったから

stackOverflowで点がたくさんついていると信頼できるソースだといえる（100件以上とか）